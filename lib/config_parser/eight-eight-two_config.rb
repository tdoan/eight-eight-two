#
# Autogenerated from a Treetop grammar. Edits may be lost.


# eight-eight-two_config.treetop - Config file treetop grammar
#
# ====================================================================
# Copyright (c) 2014 Tony Doan <tdoan@tdoan.com>.  All rights reserved.
#
# This software is licensed as described in the file LICENSE.txt, which
# you should have received as part of this distribution.  The terms
# are also available at http://github.com/tdoan/eight-eight-two/tree/master/LICENSE.txt.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
# ====================================================================
#
module EightEightTwoConfig
  include Treetop::Runtime

  def root
    @root ||= :body
  end

  def _nt_body
    start_index = index
    if node_cache[:body].has_key?(index)
      cached = node_cache[:body][index]
      if cached
        node_cache[:body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_server_block
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_space
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Body,input, i0...index, s0)

    node_cache[:body][start_index] = r0

    r0
  end

  module ServerBlock0
    def space
      elements[1]
    end

    def bbody
      elements[3]
    end

  end

  def _nt_server_block
    start_index = index
    if node_cache[:server_block].has_key?(index)
      cached = node_cache[:server_block][index]
      if cached
        node_cache[:server_block][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('server', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('server')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if (match_len = has_terminal?('{', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('{')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_block_body
          s0 << r4
          if r4
            if (match_len = has_terminal?('}', false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('}')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ServerBlock,input, i0...index, s0)
      r0.extend(ServerBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:server_block][start_index] = r0

    r0
  end

  def _nt_block_body
    start_index = index
    if node_cache[:block_body].has_key?(index)
      cached = node_cache[:block_body][index]
      if cached
        node_cache[:block_body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_port
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_ips
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          r4 = _nt_domain_name
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            r5 = _nt_backend
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              r6 = _nt_options
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                r7 = _nt_space
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(BlockBody,input, i0...index, s0)

    node_cache[:block_body][start_index] = r0

    r0
  end

  module Port0
    def port_number
      elements[3]
    end
  end

  def _nt_port
    start_index = index
    if node_cache[:port].has_key?(index)
      cached = node_cache[:port][index]
      if cached
        node_cache[:port][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('port:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('port:')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_integer
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Port,input, i0...index, s0)
      r0.extend(Port0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:port][start_index] = r0

    r0
  end

  module Ips0
    def ip
      elements[3]
    end
  end

  def _nt_ips
    start_index = index
    if node_cache[:ips].has_key?(index)
      cached = node_cache[:ips][index]
      if cached
        node_cache[:ips][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('ip:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('ip:')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9.]'] ||= Regexp.new(gr), :regexp, index)
              r7 = true
              @index += 1
            else
              terminal_parse_failure('[0-9.]')
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Ip,input, i0...index, s0)
      r0.extend(Ips0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ips][start_index] = r0

    r0
  end

  module DomainName0
    def string
      elements[3]
    end
  end

  def _nt_domain_name
    start_index = index
    if node_cache[:domain_name].has_key?(index)
      cached = node_cache[:domain_name][index]
      if cached
        node_cache[:domain_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('domain:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('domain:')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_string
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(DomainName,input, i0...index, s0)
      r0.extend(DomainName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:domain_name][start_index] = r0

    r0
  end

  module Backend0
    def string
      elements[3]
    end
  end

  def _nt_backend
    start_index = index
    if node_cache[:backend].has_key?(index)
      cached = node_cache[:backend][index]
      if cached
        node_cache[:backend][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('backend:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('backend:')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_string
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Backend,input, i0...index, s0)
      r0.extend(Backend0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:backend][start_index] = r0

    r0
  end

  module Options0
    def ob
      elements[5]
    end

  end

  def _nt_options
    start_index = index
    if node_cache[:options].has_key?(index)
      cached = node_cache[:options][index]
      if cached
        node_cache[:options][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('options:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('options:')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('{', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('{')
            r6 = nil
          end
          s0 << r6
          if r6
            r8 = _nt_space
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              r9 = _nt_options_body
              s0 << r9
              if r9
                r11 = _nt_space
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  if (match_len = has_terminal?('}', false, index))
                    r12 = true
                    @index += match_len
                  else
                    terminal_parse_failure('}')
                    r12 = nil
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Options,input, i0...index, s0)
      r0.extend(Options0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:options][start_index] = r0

    r0
  end

  def _nt_options_body
    start_index = index
    if node_cache[:options_body].has_key?(index)
      cached = node_cache[:options_body][index]
      if cached
        node_cache[:options_body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_option
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_space
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(OptionsBody,input, i0...index, s0)

    node_cache[:options_body][start_index] = r0

    r0
  end

  module Option0
    def key
      elements[1]
    end

    def value
      elements[4]
    end

  end

  def _nt_option
    start_index = index
    if node_cache[:option].has_key?(index)
      cached = node_cache[:option][index]
      if cached
        node_cache[:option][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_string
      s0 << r3
      if r3
        if (match_len = has_terminal?(':', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_string
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Option,input, i0...index, s0)
      r0.extend(Option0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:option][start_index] = r0

    r0
  end

  module Integer0
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        node_cache[:integer][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    if (match_len = has_terminal?('+', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('+')
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?('-', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('-')
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r6 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r6 = nil
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(IntegerLiteral,input, i0...index, s0)
      r0.extend(Integer0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  module Float0
  end

  module Float1
  end

  module Float2
  end

  def _nt_float
    start_index = index
    if node_cache[:float].has_key?(index)
      cached = node_cache[:float][index]
      if cached
        node_cache[:float][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    if (match_len = has_terminal?('+', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('+')
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?('-', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('-')
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r6 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r6 = nil
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
      if r5
        i7 = index
        i8, s8 = index, []
        if (match_len = has_terminal?('.', false, index))
          r9 = true
          @index += match_len
        else
          terminal_parse_failure('.')
          r9 = nil
        end
        s8 << r9
        if r9
          s10, i10 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r11 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r11 = nil
            end
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s8 << r10
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(Float0)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          i12, s12 = index, []
          if (match_len = has_terminal?('e', false, index))
            r13 = true
            @index += match_len
          else
            terminal_parse_failure('e')
            r13 = nil
          end
          s12 << r13
          if r13
            s14, i14 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r15 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r15 = nil
              end
              if r15
                s14 << r15
              else
                break
              end
            end
            if s14.empty?
              @index = i14
              r14 = nil
            else
              r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
            end
            s12 << r14
          end
          if s12.last
            r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            r12.extend(Float1)
          else
            @index = i12
            r12 = nil
          end
          if r12
            r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
            r7 = r12
          else
            @index = i7
            r7 = nil
          end
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(FloatLiteral,input, i0...index, s0)
      r0.extend(Float2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:float][start_index] = r0

    r0
  end

  module QuotedString0
  end

  module QuotedString1
  end

  def _nt_quoted_string
    start_index = index
    if node_cache[:quoted_string].has_key?(index)
      cached = node_cache[:quoted_string][index]
      if cached
        node_cache[:quoted_string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?(@regexps[gr = '\A[^"\\\\]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[^"\\\\]')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          i5, s5 = index, []
          if (match_len = has_terminal?("\\", false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure("\\")
            r6 = nil
          end
          s5 << r6
          if r6
            if index < input_length
              r7 = true
              @index += 1
            else
              terminal_parse_failure("any character")
              r7 = nil
            end
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(QuotedString0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('"')
          r8 = nil
        end
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(StringLiteral,input, i0...index, s0)
      r0.extend(QuotedString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_string][start_index] = r0

    r0
  end

  module String0
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[a-zA-Z\\=\\*]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[a-zA-Z\\=\\*]')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_\\=\\*]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9_\\=\\*]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(StringLiteral,input, i0...index, s0)
      r0.extend(String0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[\\s]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class EightEightTwoConfigParser < Treetop::Runtime::CompiledParser
  include EightEightTwoConfig
end

